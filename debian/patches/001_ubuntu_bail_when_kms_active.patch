From c0416148852843e0dfa14c9219541543cbd6a41d Mon Sep 17 00:00:00 2001
From: Christopher James Halse Rogers <christopher.halse.rogers@canonical.com>
Date: Wed, 24 Mar 2010 19:11:29 +1100
Subject: [PATCH] Refuse to bind to a device which has kernel modesetting active.
 .
 Trying to program a VESA mode while kernel modesetting is active can
 result in an improperly driven screen.
Bug: http://bugs.freedesktop.org/show_bug.cgi?id=26878
Bug-Ubuntu: https://bugs.edge.launchpad.net/ubuntu/+source/xserver-xorg-video-vesa/+bug/531736
---
 configure.ac    |    7 +++++++
 src/Makefile.am |    2 +-
 src/vesa.c      |   35 +++++++++++++++++++++++++++++++++++
 3 files changed, 43 insertions(+), 1 deletions(-)

Index: xserver-xorg-video-vesa/configure.ac
===================================================================
--- xserver-xorg-video-vesa.orig/configure.ac
+++ xserver-xorg-video-vesa/configure.ac
@@ -93,7 +93,14 @@
 fi
 AM_CONDITIONAL(XSERVER_LIBPCIACCESS, test "x$XSERVER_LIBPCIACCESS" = xyes)
 
-CFLAGS="$CFLAGS $XORG_CFLAGS "' -I$(top_srcdir)/src'
+if test "x$XSERVER_LIBPCIACCESS" = xyes; then
+    PKG_CHECK_MODULES(LIBDRM, [libdrm > 2.4.3 xf86driproto], HAVE_KMS="yes", HAVE_KMS="no")
+    if test "x$HAVE_KMS" = xyes; then
+        AC_DEFINE(HAVE_KMS, 1, [Have kernel modesetting])
+    fi
+fi
+
+CFLAGS="$CFLAGS $XORG_CFLAGS $LIBDRM_CFLAGS "' -I$(top_srcdir)/src'
 INCLUDES="$XORG_INCS "'-I$(top_srcdir)/src'
 AC_SUBST([CFLAGS])
 AC_SUBST([INCLUDES])
@@ -103,6 +110,7 @@
 # Checks for header files.
 AC_HEADER_STDC
 
+
 DRIVER_NAME=vesa
 AC_SUBST([DRIVER_NAME])
 
Index: xserver-xorg-video-vesa/src/vesa.c
===================================================================
--- xserver-xorg-video-vesa.orig/src/vesa.c
+++ xserver-xorg-video-vesa/src/vesa.c
@@ -65,6 +65,10 @@
 #include <X11/extensions/dpms.h>
 #endif
 
+#ifdef HAVE_KMS
+#include <xf86drmMode.h>
+#include <dri.h>
+#endif
 
 /* Mandatory functions */
 static const OptionInfoRec * VESAAvailableOptions(int chipid, int busid);
@@ -106,6 +110,9 @@
 static void RestoreFonts(ScrnInfoPtr pScrn);
 static Bool 
 VESASaveRestore(ScrnInfoPtr pScrn, vbeSaveRestoreFunction function);
+#ifdef HAVE_KMS
+static Bool VESAKernelModesettingEnabled (struct pci_device *device);
+#endif
 
 static void *
 VESAWindowLinear(ScreenPtr pScreen, CARD32 row, CARD32 offset, int mode,
@@ -317,6 +324,24 @@
 				(double)(ddcmode->HTotal * ddcmode->VTotal));
 }
 
+#ifdef HAVE_KMS
+static Bool VESAKernelModesettingEnabled (struct pci_device *device)
+{
+    char *busIdString;
+    int ret;
+
+    if (!xf86LoaderCheckSymbol("DRICreatePCIBusID"))
+	return FALSE;
+
+    busIdString = DRICreatePCIBusID(device);
+
+    ret = drmCheckModesettingSupported(busIdString);
+    xfree(busIdString);
+
+    return (ret == 0);    
+}
+#endif //HAVE_KMS
+
 static ModeStatus
 VESAValidMode(int scrn, DisplayModePtr p, Bool flag, int pass)
 {
@@ -428,6 +453,16 @@
 {
     ScrnInfoPtr pScrn;
     
+#ifdef HAVE_KMS    
+    /* Trying to bring up a VESA mode while kernel modesetting is enabled
+       results in badness */
+    if (VESAKernelModesettingEnabled (dev)) {
+	xf86Msg (X_ERROR, 
+	         "VESA: Kernel modesetting driver in use, refusing to load\n");
+	return FALSE;
+    }
+#endif
+
     pScrn = xf86ConfigPciEntity(NULL, 0, entity_num, NULL, 
 				NULL, NULL, NULL, NULL, NULL);
     if (pScrn != NULL) {
Index: xserver-xorg-video-vesa/src/Makefile.am
===================================================================
--- xserver-xorg-video-vesa.orig/src/Makefile.am
+++ xserver-xorg-video-vesa/src/Makefile.am
@@ -27,6 +27,7 @@
 vesa_drv_la_LTLIBRARIES = vesa_drv.la
 vesa_drv_la_LDFLAGS = -module -avoid-version
 vesa_drv_ladir = @moduledir@/drivers
+vesa_drv_la_LIBADD = @LIBDRM_LIBS@
 
 vesa_drv_la_SOURCES = \
          vesa.c \
